@using UsersDiosna.Handlers
@model List<AlarmHelper.alarm>


@{
    ViewBag.Title = "Alarms";
    int pageLess = ViewBag.page - 1;
    int pageMore = ViewBag.page + 1;
    List<int> currentAlarmIDs = new List<int>();
    ViewBag.filtered = Session["filtered"];
}
<h4>Alarms</h4>
<div>
    @if (pageLess >= 0)
    {
        <a class="btn-sm btn-primary" href="/Alarm/Page/@pageLess/">&lArr;</a>
    }
    Page: @ViewBag.page
    <a class="btn-sm btn-primary" href="/Alarm/Page/@pageMore/">&rArr;</a>
    @if (ViewBag.filtered != null)
    {
        <div class="right">
            <br>
            @ViewBag.filtered
            <a class="btn-sm btn-info" href="/Alarm/CancelFilter/">Reset current filter on alarms</a>
        </div>
    }
    @if (Session["AlarmDB"].ToString() != "")
    {
    <div class="btn-toolbar">
        <br>
        <p>
        <a class="btn-sm btn-primary" href="/AlarmNotification/All?name=@Request.QueryString["name"]&plc=@Request.QueryString["plc"]">Notification from all alarms</a>
        <a class="btn-sm btn-primary" href="/Alarm/FilterAll">Filter from all alarms</a>
        <a class="btn-sm btn-primary" href="/Alarm/FilterCurrent">Filter from current alarms</a>
        <a class="btn-sm btn-primary" href="/AlarmNotification/FromCurrent?name=@Request.QueryString["name"]&plc=@Request.QueryString["plc"]">Notification from current alarms</a>
        </p>
    </div>
    }
    else
    {
        <div class="btn-toolbar">
            <a class="btn btn-default" href="/Alarm/Filter">Filter from all alarms</a>
            <a class="btn btn-default" href="/Alarm/Filter">Filter from current alarms</a>
        </div>
    }
</p>
<table class="table table-striped table-bordered table-condensed table-hover">
    <tr>
        <th>Id</th>
        <th>Name of alarm</th>
        <th>Origin</th>
        <th>Expiry</th>
    </tr>
    @for (int i = 0; i < Model.Count; i++)
    {
        <tr>
            <td>@Model[i].id</td>
            @if (!currentAlarmIDs.Exists(p => p == Model[i].id)) {
                currentAlarmIDs.Add(Model[i].id);
            }
            <td>@Model[i].title</td>
            <td id="date_@i">@Model[i].originTime</td>
            <td id="expDate_@i">@Model[i].expiryTime</td>
        </tr>
    }
    @{Session["alarmIDs"] = currentAlarmIDs;}
</table>
<script>
        function DateTime(date){
                var offset = date.getTimezoneOffset();
                var offseted_miliseconds = date.getTime() - (offset*60000);
                var DateTime = new Date(offseted_miliseconds);
                var localDateTime = DateTime.toLocaleString();
                return localDateTime;
            }
</script>
@for (int i = 0; i < Model.Count; i++)
{
    <script>
        var year = @Model[i].originTime.Year;
        var month = @Model[i].originTime.Month;
        var day = @Model[i].originTime.Day;
        var hour = @Model[i].originTime.Hour;
        var minute = @Model[i].originTime.Minute;
        var second = @Model[i].originTime.Second;
        var date = new Date(year, month, day, hour, minute, second, 0);
        console.log(date);
                var yearExp = @Model[i].expiryTime.Year;
                var monthExp = @Model[i].expiryTime.Month;
                var dayExp = @Model[i].expiryTime.Day;
                var hourExp = @Model[i].expiryTime.Hour;
                var minuteExp = @Model[i].expiryTime.Minute;
                var secondExp = @Model[i].expiryTime.Second;
                var expDate = new Date(yearExp, monthExp, dayExp, hourExp, minuteExp, secondExp, 0);

            var localDateTime = DateTime(date);
            document.getElementById("date_" + "@i").innerHTML = localDateTime;
            var localExpDateTime = DateTime(expDate);
            document.getElementById("expDate_" + "@i").innerHTML = localExpDateTime;
    </script>
}
@*<p class="right">
    <a class="btn btn-default" href="/Alarm/Filter?name=@Request.QueryString["name"]&plc=@Request.QueryString["plc"]">Filter from all alarms</a>
</p>*@