@using System.Threading;
@using System.Globalization;
@using UsersDiosna.Report.Models
@model UsersDiosna.Report.Models.DataReportModel

@{
    ViewBag.Title = "calender";
    string name = string.Empty;
    int EndType = 0;
    int amntTotal = 0;
    int amntOverall= 0;
    int amnt = 0;
    string colourRow = "white";
    int count = 0;
    int countOverall = 0;
    int dosingOutCount = 0;
    int dosingOutAmountSum = 0;
    int rowDOcount = 0;
    int rowDOamount = 0;
    int rowDOcountOverall = 0;
    int rowDOamountOverall = 0;
    int cleaningCount = 0;
    /*
    int rowDOcount = 0;
    int rowDOamount = 0;
    int rowDOcountOverall = 0;
    int rowDOamountOverall = 0;
    */
    int year = ViewBag.year;
    int yearOnButtonLeft = year;
    int yearOnButtonRight = year;
    int monthLess = ViewBag.Month - 1;
    int monthMore = ViewBag.Month + 1;
    if (monthLess < 1) {
        yearOnButtonLeft--;
        monthLess = 12;
    }
    if (monthMore > 12) {
        yearOnButtonRight++;
        monthMore = 1;
    }
    ViewHeaderDosingOut dosingOut = null;
    ViewHeaderCleaning cleaning = null;
    Thread.CurrentThread.CurrentCulture = new CultureInfo("en-US");
    DateTime monthDT = new DateTime(year, ViewBag.month, 1);
    string monthName = monthDT.ToString("MMMM");

}

<h4>Calender</h4>
<div class=" col-md-12">
    <a class="btn-primary btn-xs" href="/Report/Month/@monthLess/@yearOnButtonLeft">-1 month</a> Month: @monthName @year <a class="btn-primary btn-xs" href="/Report/Month/@monthMore/@yearOnButtonRight">+1 month</a>
    <p></p>
</div>
<div class=" col-md-12">
    <div class="checkbox-inline big-checkbox">
        <input type="checkbox" onclick="hideShowBatches()"/>Hide/Show Batches
    </div>
    <div class="checkbox-inline big-checkbox">
            <input type="checkbox" onclick="hideShowDosing()" checked/>Hide/Show Dosing
    </div>
    <div class="checkbox-inline big-checkbox">
            <input type="checkbox" onclick="hideShowCleaning()" checked/>Hide/Show Cleaning
    </div>
</div>
<table class="table-bordered table-condensed">
    <thead>
    <tr>
        <th>Day | Hours</th>
        @for (int hours = 0;hours<24;hours++) {
            <th class="th-Report">@hours</th>
        }
        <th style="background-color: lightcyan;" title="Batches Count">B. cnt.</th>
        <th style="background-color: lightcyan;" title="Dosing Count">DO. cnt.</th>
        <th style="background-color: lightgray;" title="Batches amount">B. amt.</th>       
        <th style="background-color: lightgray;" title="Dosing amount">DO. amt.</th>
    </tr>
    </thead>
    @for (int day = 1; day <= DateTime.DaysInMonth(year, ViewBag.month); day++)
    {
        @{ DateTime dayDT = new DateTime(year, ViewBag.month, day); string sDay = dayDT.DayOfWeek.ToString();  }
        <tr>
            @if (dayDT.DayOfWeek == DayOfWeek.Saturday || dayDT.DayOfWeek == DayOfWeek.Sunday)
            {
                colourRow = "lightgoldenrodyellow";
                <td>@day. @sDay</td>
            } else
            {
                colourRow = "white";
                <td>@day. @sDay</td>            
            }
           @for (int hour = 0; hour < 24; hour++)
           {
               List<ViewHeaderBatch> batches = new List<ViewHeaderBatch>();
               int latestBatchNo = 0;
               name = string.Empty;
               if (Model.Data.Exists(p => p.TimeStart.Day == day && p.TimeStart.Hour == hour))
               {
                   var data = Model.Data.Where(p => p.TimeStart.Day == day && p.TimeStart.Hour == hour && p.RecordType != Operations.DosingOut);
                   foreach (var batch in data)
                   {
                       if (batch.Need != 0)
                       {
                           amnt = batch.Need / 1000;
                           amntTotal += amnt;
                       }
                       if (batch.BatchNo != latestBatchNo && (batch.RecordType == Operations.RecipeStart))
                       {

                           batches.Add(new ViewHeaderBatch() { Name = batch.Destination, BatchNo = batch.BatchNo, AmntTotal = amnt, RecipeNo = batch.Variant1});
                           count++;
                       }
                       latestBatchNo = batch.BatchNo;
                   }
               }
               if (Model.Data.Exists(p => p.TimeStart.Day == day && p.TimeStart.Hour == hour && p.RecordType == Operations.DosingOut))
               {
                   dosingOutCount = Model.Data.Where(p => p.TimeStart.Day == day && p.TimeStart.Hour == hour && p.RecordType == Operations.DosingOut).Count();
                   dosingOutAmountSum = Model.Data.Where(p => p.TimeStart.Day == day && p.TimeStart.Hour == hour && p.RecordType == Operations.DosingOut).Sum(p => p.Actual);
                   dosingOut = new ViewHeaderDosingOut { hour = hour, count = dosingOutCount, amountSum = dosingOutAmountSum};
               }
               if (Model.Data.Exists(p => p.TimeStart.Day == day && p.TimeStart.Hour == hour && (p.RecordType == Operations.FermenterCleaning || p.RecordType == Operations.PipWorkCleaning || p.RecordType == Operations.YeastCleaning)))
               {
                   var cleanings = Model.Data.Where(p => p.TimeStart.Day == day && p.TimeStart.Hour == hour && (p.RecordType == Operations.FermenterCleaning || p.RecordType == Operations.PipWorkCleaning || p.RecordType == Operations.YeastCleaning));
                   foreach (var cleanOp in cleanings) {
                       if (cleanOp.RecordType == Operations.Pigging) {
                           cleaning = new ViewHeaderCleaning { cleaning = cleanOp.RecordType.ToString(), destination = cleanOp.Destination, BatchNo = cleanOp.BatchNo, ClnType = ClnType.none, StartedBy = (StartedBy)cleanOp.Variant2 };
                       }
                       else {
                           cleaning = new ViewHeaderCleaning { cleaning = cleanOp.RecordType.ToString(), destination = cleanOp.Destination, BatchNo = cleanOp.BatchNo, ClnType = (ClnType)cleanOp.Variant1, StartedBy = (StartedBy)cleanOp.Variant2 };
                       }
                   }
               }
                <td style="background-color: @colourRow">
                    @foreach (var batch in batches)
                    {
                        if (Model.Data.Exists(p => p.BatchNo == batch.BatchNo && p.RecordType == Operations.RecipeEnd))
                        {
                            EndType = Model.Data.Single(p => p.BatchNo == batch.BatchNo && p.RecordType == Operations.RecipeEnd).Variant2; // takes endType
                        }
                        batch.Status = Convert.ToBoolean(EndType);
                        if (batch.Status != false)
                        {
                            <b><a href="/Report/Detail/@batch.BatchNo" class="batch" style="color: darkgreen;" title="Batch: @batch.BatchNo  Recipe: @batch.RecipeNo Filled amount: @batch.AmntTotal kg">@batch.Name</a></b>
                        }
                        else
                        {
                            <b><a href="/Report/Detail/@batch.BatchNo" class="batch" title="Batch: @batch.BatchNo  Recipe: @batch.RecipeNo Filled amount: @batch.AmntTotal kg">@batch.Name</a></b>
                        }
                    }
                    @if (dosingOut != null)
                    {
                        <a href="/ReportDosing/Day/@day/@ViewBag.Month/@year" class="dosing" title="Total Amount: @(dosingOut.amountSum/1000) kg">(<b>@dosingOut.count</b>)</a>
                        rowDOcount += dosingOut.count;
                        rowDOamount += (dosingOut.amountSum/1000);
                        dosingOut = null;
                    }
                    @if (cleaning != null)
                    {
                        <a href="/ReportCleaning/Day/@day/@ViewBag.Month/@year" class="cleaning" title="Cleaning: @cleaning.cleaning Clean Type: @cleaning.ClnType.ToString() Started By: @cleaning.StartedBy.ToString()">[<b>@cleaning.destination</b>]</a>
                        cleaning = null;
                    }
                </td>
           }
            @if (count != 0)
            {
                <td  style="background-color: lightcyan; text-align: center;">@count</td>
            } else {
                <td style="background-color: lightcyan; text-align: center;"></td>
            }
            @{countOverall += count; count = 0; }
            @if (rowDOcount != 0)
            {
                <td style="background-color: lightcyan; text-align: center; ">@rowDOcount</td>
            }
            else
            {
                <td style="background-color: lightcyan; text-align: center;"></td>
            }
            @{ rowDOcountOverall += rowDOcount; rowDOcount = 0; }
            @if (amntTotal != 0)
            {
                <td style="background-color: lightgray; text-align: center; ">@amntTotal kg</td>
            } else {
                <td style="background-color: lightgray; text-align: center;"></td>
            }
            @{amntOverall += amntTotal; amntTotal = 0; }
            @if (rowDOamount != 0)
            {
                <td style="background-color: lightgray; text-align: center; ">@rowDOamount kg</td>
            }
            else
            {
                <td style="background-color: lightgray; text-align: center;"></td>
            }
            @{ rowDOamountOverall += rowDOamount; rowDOamount = 0; }
        </tr>
    }
    <tr>
        <td><b>Total</b></td>
        @for (int hours = 0; hours < 24; hours++)
        {
            <td class="th-Report"></td>
        }
        <td style="text-align: center;"><b>@countOverall</b></td>
        <td style="text-align: center;"><b>@rowDOcountOverall</b></td>
        <td style="text-align: center;"><b>@amntOverall kg</b></td>
        <td style="text-align: center;"><b>@rowDOamountOverall kg</b></td>
    </tr>
</table>