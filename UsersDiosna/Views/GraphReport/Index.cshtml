@model UsersDiosna.GraphReport.Models.GraphReportForm
@{
    int year, month, day, hours, minutes;
    string datetimeToValue = "";
    string datetimeFromValue = "";
    if (Model.endDateTime.Ticks == 0)
    {
        year = DateTime.Now.Year;
        month = DateTime.Now.Month;
        day = DateTime.Now.Day - 1;
        hours = DateTime.Now.Hour;
        minutes = DateTime.Now.Minute;
    }
    else
    {
        year = Model.endDateTime.Year;
        month = Model.endDateTime.Month;
        day = Model.endDateTime.Day;
        hours = Model.endDateTime.Hour;
        minutes = Model.endDateTime.Minute;
    }

    string smonth = month.ToString();
    string sday = day.ToString();
    string shours = hours.ToString();
    string sminutes = minutes.ToString();

    if (month < 10)
    {
        smonth = "0" + smonth;
    }
    if (day < 10)
    {
        sday = "0" + day;
    }
    if (hours < 10)
    {
        shours = "0" + hours;
    }
    if (minutes < 10)
    {
        sminutes = "0" + sminutes;
    }
    if (day < 1)
    {
        sday = "28";
    }

    datetimeFromValue = year + "-" + smonth + "-" + sday + "T" + shours + ":" + sminutes;

    if (Model.beginDateTime.Ticks == 0)
    {
        year = DateTime.Now.Year;
        month = DateTime.Now.Month;
        day = DateTime.Now.Day;
        hours = DateTime.Now.Hour;
        minutes = DateTime.Now.Minute;
    }
    else
    {
        year = Model.beginDateTime.Year;
        month = Model.beginDateTime.Month;
        day = Model.beginDateTime.Day;
        hours = Model.beginDateTime.Hour;
        minutes = Model.beginDateTime.Minute;
    }
    smonth = month.ToString();
    sday = day.ToString();
    shours = hours.ToString();
    sminutes = minutes.ToString();
    if (month < 10)
    {
        smonth = "0" + month;
    }
    if (day < 10)
    {
        sday = "0" + day;
    }
    if (day < 1)
    {
        sday = "28";
    }
    if (hours < 10)
    {
        shours = "0" + hours;
    }
    if (minutes < 10)
    {
        sminutes = "0" + minutes;
    }
    datetimeToValue = year + "-" + smonth + "-" + sday + "T" + shours + ":" + sminutes;
}
@using (Html.BeginForm("Index", "GraphReport",FormMethod.Post))
{
    @Html.AntiForgeryToken()
    <!-- date time from -->
    <div class="form-item">
        <div>
            @Html.LabelFor(model => model.beginDateTime)
        </div>
        <div>
            @Html.TextBoxFor(model => model.beginDateTime, new { @class = "date-time", id = "date-time_from", type = "datetime-local", Value = @datetimeFromValue })
        </div>
    </div>
    <!-- datetime to -->
    <div class="form-item">
        <div>
            @Html.LabelFor(model => model.endDateTime)
        </div>
        <div>
            @Html.TextBoxFor(model => model.endDateTime, new { @id = "date-time_to", @class = "date-time", @type = "datetime-local", Value = @datetimeToValue })
        </div>
    </div>
    <!-- multiple selection list -->
    <div class="form-group">
        @Html.LabelFor(model => model.tags, htmlAttributes: new { @class = "control-label col-lg-2" })
        <div class="col-lg-9">
            @Html.ListBoxFor(model => model.tags, Model.tagList, new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.tags, "", new { @class = "text-danger" })
        </div>
    </div>
    <!-- count of graphs to view all of tags -->
    <div class="form-group">
        @Html.LabelFor(model => model.tags, htmlAttributes: new { @class = "control-label col-lg-2" })
        <div class="col-lg-9">
            @Html.TextBoxFor(model => model.GraphsCount, new { type = "number", min = 1, step = 1, @class = "form-control" })
            @Html.ValidationMessageFor(model => model.GraphsCount, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        <div class="col-lg-offset-9 col-lg-3">
            <input type="submit" value="Create" class="btn btn-primary" />
        </div>
    </div>
}